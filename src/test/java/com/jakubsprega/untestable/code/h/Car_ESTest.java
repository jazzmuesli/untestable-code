/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 28 00:30:11 GMT 2018
 */

package com.jakubsprega.untestable.code.h;

import org.junit.Test;
import static org.junit.Assert.*;
import com.jakubsprega.untestable.code.h.Body;
import com.jakubsprega.untestable.code.h.Car;
import com.jakubsprega.untestable.code.h.Chassis;
import com.jakubsprega.untestable.code.h.Cylinder;
import com.jakubsprega.untestable.code.h.Engine;
import com.jakubsprega.untestable.code.h.Silencer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Engine engine0 = new Engine((Cylinder) null);
      Car car0 = new Car(engine0, (Body) null, (Chassis) null);
      Engine engine1 = car0.getEngine();
      assertSame(engine1, engine0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Engine engine0 = new Engine((Cylinder) null);
      Car car0 = new Car(engine0, (Body) null, (Chassis) null);
      Chassis chassis0 = car0.getChassis();
      assertNull(chassis0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Engine engine0 = new Engine((Cylinder) null);
      Car car0 = new Car(engine0, (Body) null, (Chassis) null);
      Body body0 = car0.getBody();
      assertNull(body0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Body body0 = new Body();
      Chassis chassis0 = new Chassis((Silencer) null);
      Car car0 = new Car((Engine) null, body0, chassis0);
      Engine engine0 = car0.getEngine();
      assertNull(engine0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Body body0 = new Body();
      Chassis chassis0 = new Chassis((Silencer) null);
      Car car0 = new Car((Engine) null, body0, chassis0);
      Body body1 = car0.getBody();
      assertSame(body1, body0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Body body0 = new Body();
      Chassis chassis0 = new Chassis((Silencer) null);
      Car car0 = new Car((Engine) null, body0, chassis0);
      Chassis chassis1 = car0.getChassis();
      assertSame(chassis1, chassis0);
  }
}
